#!/usr/bin/env node
/*
 * Copyright (c) 2019 Yahweasel
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

const fs = require("fs");
const banks = JSON.parse(fs.readFileSync("banks.json", "utf8"));

const ch = fs.createWriteStream("banks-gen.h", "utf8");
const ah = fs.createWriteStream("banks-gen.inc", "utf8");

ch.write("/* Generated by banks.js */\n#ifndef BANKS_GEN_H\n#define BANKS_GEN_H 1\n");
ah.write("; Generated by banks.js\n");

(function() {
    for (var bi = 0; bi < banks.length; bi++) {
        var bank = banks[bi];

        // Write out the bank number
        ch.write("#define BANK_" + bank.name + " " + bi + "\n");
        ah.write("bank_" + bank.name + " = " + bi + "\n");

        // And the content
        if (bank.sprites) {
            // Sprite metadata is only on bank 0, and has its own table
            var st = fs.createWriteStream("st-gen.s");
            st.write("; Generated by banks.js\n" +
                     ".export _spriteTable\n" +
                     ".export _characterTable\n" +
                     ".segment \"RODATA\"\n" +
                     "_spriteTable:\n");
            bank.sprites = bank.characters.concat(bank.sprites);

            for (var si = 0; si < bank.sprites.length; si++) {
                var sprite = bank.sprites[si];
                ch.write("#define SPR_" + sprite + " " + si + "\n" +
                         "#define SPR_" + sprite + "_BANK BANK_" + bank.name + "\n");
                ah.write("spr_" + sprite + " = " + si + "\n" +
                         "spr_" + sprite + "_bank = bank_" + bank.name + "\n");
                st.write(".import _" + sprite + "\n" +
                         ".word _" + sprite + "\n");
            }

            // Character data is there too
            st.write("_characterTable:\n");

            for (var ci = 0; ci < bank.characters.length; ci++) {
                var c = bank.characters[ci];
                ch.write("#define CHAR_" + c + " " + ci + "\n" +
                         "#define CHAR_" + c + "_BANK BANK_" + bank.name + "\n");
                ah.write("char_" + c + " = " + ci + "\n" +
                         "char_" + c + "_bank = bank_" + bank.name + "\n");
                st.write(".import _" + c + "C\n" +
                         ".word _" + c + "C\n");
            }

            st.end();

        } else if (bank.chrs) {
            var idx = 0;
            for (var ci = 0; ci < bank.chrs.length; ci++) {
                var chr = bank.chrs[ci];
                ch.write("#define CHR_" + chr[0] + " " + idx + "\n" +
                         "#define CHR_" + chr[0] + "_BANK BANK_" + bank.name + "\n");
                ah.write("chr_" + chr[0] + " = " + idx + "\n" +
                         "chr_" + chr[0] + "_bank = bank_" + bank.name + "\n");
                idx += chr[1];
            }

        } else if (bank.worlds) {
            /* Worlds start after the overworld functions, so start at 4. With
             * worlds we'll also create the jump table */
            var idx = 4;
            var jt = fs.createWriteStream("overworlds/" + bank.name + "-gen.s", "utf8");
            jt.write("; Generated by banks.js\n.include \"../banks-gen.inc\"\n");

            for (var wi = 0; wi < bank.worlds.length; wi++) {
                var world = bank.worlds[wi];
                ch.write("#define WORLD_" + world + " " + idx + "\n" +
                         "#define WORLD_" + world + "_BANK BANK_" + bank.name + "\n");
                ah.write("world_" + world + " = " + idx + "\n" +
                         "world_" + world + "_bank = bank_" + bank.name + "\n");
                jt.write(".segment \"RODATA\"\n" +
                         "ow" + wi + ": .include \"" + world + ".ow\"\n" +
                         ".segment \"JUMPS\"\n" +
                         ".word ow" + wi + "\n");
                idx++;
            }

        } else if (bank.actions) {
            // With actions we'll create not just the defines, but the jump table
            var jt = fs.createWriteStream("actions/j" + bank.name + "-gen.s", "utf8");
            jt.write("; Generated by banks.js\n.segment \"JUMPS\"\n");

            for (var ai = 0; ai < bank.actions.length; ai++) {
                var action = bank.actions[ai];
                ch.write("#define ACT_" + action + " " + (ai*2) + "\n" +
                         "#define ACT_" + action + "_BANK BANK_" + bank.name + "\n");
                ah.write("act_" + action + " = " + (ai*2) + "\n" +
                         "act_" + action + "_bank = bank_" + bank.name + "\n");
                jt.write(".import _" + action + "\n.word _" + action + "\n");
            }

            jt.end();

        }

    }
})();

ch.write("#endif\n");
ch.end();
ah.end();
